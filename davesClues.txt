// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thesuperdave
// credit to © MichelT for VWAP
// 
//                                                       
//                       ---=-----                       
//                 ---------------------                 
//              ==-------------------------              
//            ==-----------------------------            
//          ===-------====----------===--------          
//        +==------==    *==-----=   *++==-------        
//       ===------        ==-----       *+==------       
//      ==-------        *=------         +==------      
//     *==-------      -=----------       +==------=     
//    ++=--------------------------------==---------=    
//    ===--------------------------------------------    
//    ===--------------------------------------------    
//   *+=---------------------------------------------    
//   *+=---------------------------------------------    
//   *+=-------=-------------------------------------    
//   *+=------====-------------------------==--------    
//   *+=-------=+++=--------------------=-+*=--------    
//   *+=-------- *+--------=-------------= *=--------    
//   *+=-------- *+=------=+*++*==-------- *=======--    
//   *+=-------- *+--------    *=---------  +++==++      
//   *+=-------- *+---------   *=--------- +=--------    
//   *+=-------- *+========    *==-------- *=--------    
//   *+=--------   --===---    *==-------- *=--------    
//    +========  ++--------    *=========  *=--------    
//       ===     *+=-------=       ===     *+========    
//   *=--------- *+=-------=    =--------       +        
//   *+=-------- *+=-------=   *=---------               
//   *+=-------- *+=-------=   *==--------               
//    +++======  *+=-------=   *=---------                             
//               *+=-------=   *=========                
//               *+=-------=     ======                  
//               *+---------        =                    
//               *+========                              
//                 +++====    

//@version=6
indicator(title = 'Dave\'s Clues', shorttitle = 'Daves\'s Clues', overlay = true)

// SETTINGS -----------------------------
// text, info etc...
display_set = display.all - display.price_scale - display.status_line
ema_text = '----------------- EMA ------------------'
vwap = '----------------- VWAP -----------------'
dwmLevels = '------------- D/W/M Levels -------------'
groupCog = '---------- +/- COG Alerts --------------'
groupEma = '------------- 20/50/200 EMA ------------'
groupVwap = '------- Auto Anchored D/W/M VWAP -------'
groupDwmLevels = '------------- D/W/M Levels -------------'

// colors
ema8color = color.rgb(6, 224, 61, 70)
ema20color = color.new(color.aqua, 70)
ema50color = color.new(color.blue, 70)
ema200color = color.new(color.purple, 50)
dVwapColor = color.new(color.gray, 50)
wVwapColor = color.new(color.yellow, 50)
mVwapColor = color.new(color.orange, 50)
globexLevelColor = color.rgb(120, 123, 134, 50)
dLevelColor = color.rgb(16, 105, 207, 50)
wLevelColor = color.rgb(218, 221, 8, 50)
mLevelColor = color.rgb(255, 153, 0, 50)
d_Line_Color = input.color(defval = dLevelColor, title = 'Daily Level', inline = dwmLevels, group = groupDwmLevels)
w_Line_Color = input.color(defval = wLevelColor, title = 'Weekly Level', inline = dwmLevels, group = groupDwmLevels)
m_Line_Color = input.color(defval = mLevelColor, title = 'Monthly Level', inline = dwmLevels, group = groupDwmLevels)
pm_hi_color         = input.color(defval=color.rgb(53, 165, 19), title="PreMarket Hi Color", inline=dwmLevels, group=groupDwmLevels)
pm_lo_color          = input.color(defval=color.rgb(192, 20, 20), title="PreMarket Lo Color", inline=dwmLevels, group=groupDwmLevels)

// GLOBALS /  CALCS ----------------------------
StartTime() => hour(time, "UTC") == 14 and minute(time, "UTC") >= 30 and bar_index>60
// Clear(int items) =>
//     if line.all.size()>items and items!=0
//         for i = 1 to line.all.size()-items
//             line.all.get(0).delete()
//             box.all.get(0).delete()
Offset(X) =>
    Bar = math.min(time - time[1], time[1] - time[2])
    time + Bar * (1 + X * 1)
f_get_changePercentage(_p1, _p2) =>
    (_p1 - _p2) * 100 / _p2

current_tf = timeframe.period
displayLtf = timeframe.isintraday and timeframe.multiplier <= 5
displayMtf = timeframe.isintraday and timeframe.multiplier >= 6 and timeframe.multiplier <= 60
displayHtf = timeframe.isdwm
displayVwapD = current_tf == 'D'
displayVwapLtf = displayLtf
isFutures = syminfo.type == 'futures'
isForex = syminfo.type == 'forex'

src = close
ema9 = ta.ema(src, 9)
ema20 = ta.ema(src, 20)
ema50 = ta.ema(src, 50)
ema200 = ta.ema(src, 200)
dev = 2.0 * ta.stdev(close, 20)

MILLIS_IN_DAY = 86400000
dwmBarTime = timeframe.isdwm ? time : time('D')

globexBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
dBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
wBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
mBlank = '‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'

var float _gH     = na
var float _gL      = na
var bool isGlobex      = false
var int premarketOpenBar= na

if session.isfirstbar
    isGlobex           := true
    _gH           := high
    _gL            := low
    premarketOpenBar    := bar_index

if StartTime() and not StartTime()[1] and not session.isfirstbar
    isGlobex := false

_gH := isGlobex and high > _gH ? high : _gH
_gL := isGlobex and low < _gL ? low : _gL

// [_gH, _gL, _gT] = request.security(syminfo.tickerid, '930', [high, low, close], barmerge.gaps_off, barmerge.lookahead_on)
[_dH, _dL, _dC] = request.security(syminfo.tickerid, 'D', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)
[_wH, _wL, _wC] = request.security(syminfo.tickerid, 'W', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)
[_mH, _mL, _mC] = request.security(syminfo.tickerid, 'M', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)

// INPUTS --------------------------------

scalpColor = input(defval = ema8color, title = '9 EMA', inline = ema_text, group = groupEma)
ltfColor = input(defval = ema20color, title = '20 EMA', inline = ema_text, group = groupEma)
mtfColor = input(defval = ema50color, title = '50 EMA', inline = ema_text, group = groupEma)
htfColor = input(defval = ema200color, title = '200 EMA', inline = ema_text, group = groupEma)


showGlobexLevels    = input.bool(defval = true, title = "Show Globex Hi/Lo?", inline = "globex", group = groupDwmLevels)
showGlobexLabels    = input.bool(defval = true, title = 'Show Globex Label?', inline = "globex", group = groupDwmLevels)
extendLines = input.bool(defval = false, title = 'Extend Levels Across Screen?', inline = dwmLevels, group = groupDwmLevels)
dwmLineWidth = input.int(defval = 2, title = 'Levels Line Width', minval = 1, maxval = 4, step = 1, group = groupDwmLevels)

// EMAs -----------------------------
plot(ema9, title = 'EMA-9', color = scalpColor, offset = 0, linewidth = 2, display = display_set)
plot(ema20, title = 'EMA-20', color = ltfColor, offset = 0, linewidth = 2, display = display_set)
//plot(ema50, title="EMA-50", color = mtfColor, offset = 0, linewidth = 3, display = display_set)
//plot(ema200, title="EMA-200", color = htfColor, offset = 0, linewidth = 4, display = display_set)

// DWM / PreMarket / Globex PRICE LEVELS --------------------------
globex_High_Line = not timeframe.isdwm ? line.new(time, _gH, time + 1, _gH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = globexLevelColor, style = line.style_solid, width = dwmLineWidth) : na
globex_Low_Line = not timeframe.isdwm ? line.new(time, _gL, time + 1, _gL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = globexLevelColor, style = line.style_solid, width = dwmLineWidth) : na
line.delete(globex_High_Line[1])
line.delete(globex_Low_Line[1])
label_globex_High = not timeframe.isdwm ? label.new(bar_index, _gH, text = globexBlank + 'Globex High : ' + str.tostring(_gH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = globexLevelColor, size = size.small, textalign = text.align_center) : na
label_globex_Low = not timeframe.isdwm ? label.new(bar_index, _gL, text = globexBlank + 'Globex Low : ' + str.tostring(_gL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = globexLevelColor, size = size.small, textalign = text.align_center) : na
label.delete(label_globex_High[1])
label.delete(label_globex_Low[1])

daily_High_Line = not timeframe.isdwm ? line.new(time, _dH, time + 1, _dH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = d_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
daily_Low_Line = not timeframe.isdwm ? line.new(time, _dL, time + 1, _dL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = d_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(daily_High_Line[1])
line.delete(daily_Low_Line[1])
label_daily_High = not timeframe.isdwm ? label.new(bar_index, _dH, text = dBlank + 'Prev D High : ' + str.tostring(_dH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center) : na
label_daily_Low = not timeframe.isdwm ? label.new(bar_index, _dL, text = dBlank + 'Prev D Low : ' + str.tostring(_dL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_daily_High[1])
label.delete(label_daily_Low[1])

weekly_High_Line = not timeframe.isdwm ? line.new(time, _wH, time + 1, _wH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = w_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
weekly_Low_Line = not timeframe.isdwm ? line.new(time, _wL, time + 1, _wL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = w_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(weekly_High_Line[1])
line.delete(weekly_Low_Line[1])
label_weekly_High = not timeframe.isdwm ? label.new(bar_index, _wH, text = wBlank + 'Prev W High : ' + str.tostring(_wH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center) : na
label_weekly_Low = not timeframe.isdwm ? label.new(bar_index, _wL, text = wBlank + 'Prev W Low : ' + str.tostring(_wL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_weekly_High[1])
label.delete(label_weekly_Low[1])

monthly_High_Line = not timeframe.isdwm ? line.new(time, _mH, time + 1, _mH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = m_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
monthly_Low_Line = not timeframe.isdwm ? line.new(time, _mL, time + 1, _mL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = m_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(monthly_High_Line[1])
line.delete(monthly_Low_Line[1])
label_monthly_High = not timeframe.isdwm ? label.new(bar_index, _mH, text = mBlank + 'Prev M High : ' + str.tostring(_mH, format.mintick) + '\n', color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center) : na
label_monthly_Low = not timeframe.isdwm ? label.new(bar_index, _mL, text = mBlank + 'Prev M Low : ' + str.tostring(_mL, format.mintick) + '\n', color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_monthly_High[1])
label.delete(label_monthly_Low[1])
// ---------
